name: Build Go Client with Docker

on:
  push:
    branches: [ main, v4.x, develop ]
    paths:
      - 'go-client/**'
      - '.github/workflows/build-go-client.yml'
  pull_request:
    branches: [ main, v4.x ]
    paths:
      - 'go-client/**'
      - '.github/workflows/build-go-client.yml'
  release:
    types: [created]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_GO: ${{ github.repository_owner }}/waddleperf-go-client
  IMAGE_NAME_LEGACY: penguincloud/waddleperf-client

jobs:
  build-binaries:
    name: Build Go Binaries with Docker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - darwin/amd64
          - darwin/arm64
          - windows/amd64
          - windows/arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for version tags

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64,darwin/amd64,darwin/arm64,windows/amd64,windows/arm64

    - name: Extract build metadata
      id: meta
      run: |
        VERSION="${GITHUB_REF_NAME:-dev}"
        if [[ "${{ github.event_name }}" == "release" ]]; then
          VERSION="${GITHUB_REF#refs/tags/}"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          VERSION="pr-${{ github.event.number }}"
        fi
        
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT="${GITHUB_SHA::8}"
        PLATFORM="${{ matrix.platform }}"
        OS="${PLATFORM%/*}"
        ARCH="${PLATFORM#*/}"
        
        # Windows binaries need .exe extension
        EXT=""
        if [[ "$OS" == "windows" ]]; then
          EXT=".exe"
        fi
        
        OUTPUT_NAME="waddleperf-${OS}-${ARCH}${EXT}"
        
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=${GIT_COMMIT}" >> $GITHUB_OUTPUT
        echo "PLATFORM=${PLATFORM}" >> $GITHUB_OUTPUT
        echo "OS=${OS}" >> $GITHUB_OUTPUT
        echo "ARCH=${ARCH}" >> $GITHUB_OUTPUT
        echo "OUTPUT_NAME=${OUTPUT_NAME}" >> $GITHUB_OUTPUT
        
        echo "Building: ${OUTPUT_NAME} for ${PLATFORM}"

    - name: Run tests (Linux AMD64 only)
      if: matrix.platform == 'linux/amd64'
      working-directory: ./go-client
      run: |
        echo "Running tests for native platform..."
        docker buildx build \
          --file Dockerfile.build \
          --target tester \
          --platform ${{ matrix.platform }} \
          --build-arg "TARGETOS=${{ steps.meta.outputs.OS }}" \
          --build-arg "TARGETARCH=${{ steps.meta.outputs.ARCH }}" \
          --build-arg "VERSION=${{ steps.meta.outputs.VERSION }}" \
          --build-arg "BUILD_TIME=${{ steps.meta.outputs.BUILD_TIME }}" \
          --build-arg "GIT_COMMIT=${{ steps.meta.outputs.GIT_COMMIT }}" \
          .

    - name: Build binary with Docker
      working-directory: ./go-client
      run: |
        echo "Building binary for ${{ matrix.platform }}..."
        docker buildx build \
          --file Dockerfile.build \
          --target extractor \
          --platform ${{ matrix.platform }} \
          --build-arg "TARGETOS=${{ steps.meta.outputs.OS }}" \
          --build-arg "TARGETARCH=${{ steps.meta.outputs.ARCH }}" \
          --build-arg "VERSION=${{ steps.meta.outputs.VERSION }}" \
          --build-arg "BUILD_TIME=${{ steps.meta.outputs.BUILD_TIME }}" \
          --build-arg "GIT_COMMIT=${{ steps.meta.outputs.GIT_COMMIT }}" \
          --output type=local,dest=./dist \
          .
        
        # List what was built
        echo "Build output:"
        ls -la ./dist/
        
        # Verify the binary exists
        if [[ -f "./dist/${{ steps.meta.outputs.OUTPUT_NAME }}" ]]; then
          echo "✅ Successfully built ${{ steps.meta.outputs.OUTPUT_NAME }}"
          file "./dist/${{ steps.meta.outputs.OUTPUT_NAME }}" || true
          ls -lh "./dist/${{ steps.meta.outputs.OUTPUT_NAME }}"
        else
          echo "❌ Binary not found: ${{ steps.meta.outputs.OUTPUT_NAME }}"
          echo "Available files:"
          ls -la ./dist/ || echo "No dist directory"
          exit 1
        fi

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.meta.outputs.OUTPUT_NAME }}
        path: go-client/dist/${{ steps.meta.outputs.OUTPUT_NAME }}
        retention-days: 7

  build-macos-universal:
    name: Build macOS Universal Binary
    runs-on: macos-latest
    needs: build-binaries
    if: always() && (needs.build-binaries.result == 'success')
    
    steps:
    - name: Download macOS AMD64 binary
      uses: actions/download-artifact@v4
      with:
        name: waddleperf-darwin-amd64
        path: ./binaries

    - name: Download macOS ARM64 binary
      uses: actions/download-artifact@v4
      with:
        name: waddleperf-darwin-arm64
        path: ./binaries

    - name: Create universal binary
      run: |
        echo "Creating macOS universal binary..."
        chmod +x binaries/waddleperf-darwin-*
        
        lipo -create -output waddleperf-darwin-universal \
          binaries/waddleperf-darwin-amd64 \
          binaries/waddleperf-darwin-arm64
        
        # Verify universal binary
        echo "Universal binary info:"
        lipo -info waddleperf-darwin-universal
        file waddleperf-darwin-universal
        ls -lh waddleperf-darwin-universal

    - name: Upload universal binary
      uses: actions/upload-artifact@v4
      with:
        name: waddleperf-darwin-universal
        path: waddleperf-darwin-universal
        retention-days: 7

  build-docker-images:
    name: Build Multi-Platform Docker Images
    runs-on: ubuntu-latest
    needs: build-binaries
    if: always() && (needs.build-binaries.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download Linux AMD64 binary
      uses: actions/download-artifact@v4
      with:
        name: waddleperf-linux-amd64
        path: ./binaries/amd64

    - name: Download Linux ARM64 binary
      uses: actions/download-artifact@v4
      with:
        name: waddleperf-linux-arm64
        path: ./binaries/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_GO }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LEGACY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{branch}}-{{sha}}
          type=schedule,pattern={{date 'YYYYMMDD'}}
        labels: |
          org.opencontainers.image.title=WaddlePerf Go Client
          org.opencontainers.image.description=Network performance testing client built with Go
          org.opencontainers.image.vendor=Penguin Technologies Inc.
          org.opencontainers.image.licenses=MIT

    - name: Prepare Docker context
      working-directory: ./go-client
      run: |
        echo "Preparing Docker build context..."
        
        # Create binaries directory structure
        mkdir -p binaries
        
        # Copy binaries to expected locations
        cp ../binaries/amd64/waddleperf-linux-amd64 binaries/ 2>/dev/null || echo "AMD64 binary not found"
        cp ../binaries/arm64/waddleperf-linux-arm64 binaries/ 2>/dev/null || echo "ARM64 binary not found"
        
        # Create runtime Dockerfile that uses pre-built binaries
        cat > Dockerfile.runtime << 'EOF'
        FROM alpine:3.19

        # Install runtime dependencies
        RUN apk add --no-cache \
            ca-certificates \
            tzdata \
            curl \
            iputils-ping \
            bind-tools \
            net-tools \
            iperf3 \
            mtr && \
            adduser -D -u 1000 waddleperf

        # Copy pre-built binaries
        COPY binaries/ /tmp/binaries/

        # Install correct binary based on target architecture
        ARG TARGETARCH
        RUN echo "Target architecture: ${TARGETARCH}" && \
            BINARY_NAME="waddleperf-linux-${TARGETARCH}" && \
            if [ -f "/tmp/binaries/${BINARY_NAME}" ]; then \
              cp "/tmp/binaries/${BINARY_NAME}" /usr/local/bin/waddleperf && \
              chmod +x /usr/local/bin/waddleperf; \
            else \
              echo "Binary ${BINARY_NAME} not found, available files:" && \
              ls -la /tmp/binaries/ && \
              exit 1; \
            fi && \
            rm -rf /tmp/binaries

        # Set up user and working directory
        USER waddleperf
        WORKDIR /home/waddleperf

        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
          CMD waddleperf info || exit 1

        # Set entrypoint and default command
        ENTRYPOINT ["/usr/local/bin/waddleperf"]
        CMD ["--help"]
        EOF
        
        echo "Docker context prepared:"
        ls -la binaries/
        echo "Dockerfile.runtime created"

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: ./go-client
        file: ./go-client/Dockerfile.runtime
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release-packages:
    name: Create Release Packages
    runs-on: ubuntu-latest
    needs: [build-binaries, build-macos-universal]
    if: always() && (needs.build-binaries.result == 'success') && (github.event_name == 'release' || github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all binary artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create distribution packages
      run: |
        echo "Creating distribution packages..."
        mkdir -p packages
        
        # List all downloaded artifacts
        echo "Available artifacts:"
        find ./artifacts -type f -name "waddleperf-*" | sort
        
        # Create archives for each platform
        for artifact_dir in ./artifacts/waddleperf-*; do
          if [[ -d "$artifact_dir" ]]; then
            artifact_name=$(basename "$artifact_dir")
            echo "Processing $artifact_name..."
            
            # Find the binary in the artifact directory
            binary_path=$(find "$artifact_dir" -name "waddleperf-*" -type f | head -1)
            
            if [[ -n "$binary_path" && -f "$binary_path" ]]; then
              binary_name=$(basename "$binary_path")
              echo "Found binary: $binary_name"
              
              # Copy binary to packages directory for archiving
              cp "$binary_path" "packages/"
              
              # Create appropriate archive based on platform
              if [[ "$binary_name" == *windows* ]]; then
                # Create zip for Windows
                cd packages
                zip "${binary_name%.exe}.zip" "$binary_name"
                rm "$binary_name"  # Remove original binary after archiving
                cd ..
                echo "✅ Created ${binary_name%.exe}.zip"
              else
                # Create tar.gz for Unix-like systems
                cd packages
                tar czf "${binary_name}.tar.gz" "$binary_name"
                rm "$binary_name"  # Remove original binary after archiving
                cd ..
                echo "✅ Created ${binary_name}.tar.gz"
              fi
            else
              echo "⚠️  No binary found in $artifact_dir"
            fi
          fi
        done
        
        # Create checksums
        if [[ -n "$(ls -A packages/ 2>/dev/null)" ]]; then
          cd packages
          sha256sum * > SHA256SUMS.txt
          echo "✅ Created SHA256SUMS.txt"
          
          echo "📦 Final packages:"
          ls -la
        else
          echo "❌ No packages were created"
          exit 1
        fi

    - name: Upload distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: packages/
        retention-days: 30

    - name: Upload to GitHub Release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          packages/*.tar.gz
          packages/*.zip
          packages/SHA256SUMS.txt
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-binaries, build-macos-universal, build-docker-images, create-release-packages]
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## WaddlePerf Go Client Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build Binaries | ${{ needs.build-binaries.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| macOS Universal | ${{ needs.build-macos-universal.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Images | ${{ needs.build-docker-images.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Release Packages | ${{ needs.create-release-packages.result }} |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY