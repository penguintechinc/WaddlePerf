name: Build Go Client

on:
  push:
    branches: [ main, v4.x, develop ]
    paths:
      - 'go-client/**'
      - '.github/workflows/build-go-client.yml'
  pull_request:
    branches: [ main, v4.x ]
    paths:
      - 'go-client/**'
      - '.github/workflows/build-go-client.yml'
  release:
    types: [created]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  build-matrix:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            output: waddleperf-linux-amd64
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            output: waddleperf-linux-arm64
          
          # Windows builds
          - os: windows
            arch: amd64
            runner: windows-latest
            output: waddleperf-windows-amd64.exe
          - os: windows
            arch: arm64
            runner: windows-latest
            output: waddleperf-windows-arm64.exe
          
          # macOS builds
          - os: darwin
            arch: amd64
            runner: macos-latest
            output: waddleperf-darwin-amd64
          - os: darwin
            arch: arm64
            runner: macos-latest
            output: waddleperf-darwin-arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Get dependencies
      working-directory: ./go-client
      run: |
        go mod download
        go mod verify
    
    - name: Run tests
      if: matrix.arch == 'amd64'  # Only run tests on native architecture
      working-directory: ./go-client
      run: go test -v ./...
    
    - name: Build binary
      working-directory: ./go-client
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        VERSION="${GITHUB_REF_NAME:-dev}"
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT="${GITHUB_SHA::8}"
        
        go build -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT}" \
          -o ../dist/${{ matrix.output }} \
          ./cmd/waddleperf
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output }}
        path: dist/${{ matrix.output }}
        retention-days: 7

  build-macos-universal:
    name: Build macOS Universal Binary
    runs-on: macos-latest
    needs: build-matrix
    steps:
    - name: Download macOS AMD64 binary
      uses: actions/download-artifact@v4
      with:
        name: waddleperf-darwin-amd64
        path: ./binaries
    
    - name: Download macOS ARM64 binary
      uses: actions/download-artifact@v4
      with:
        name: waddleperf-darwin-arm64
        path: ./binaries
    
    - name: Create universal binary
      run: |
        chmod +x binaries/waddleperf-darwin-*
        lipo -create -output waddleperf-darwin-universal \
          binaries/waddleperf-darwin-amd64 \
          binaries/waddleperf-darwin-arm64
        
        # Verify universal binary
        lipo -info waddleperf-darwin-universal
        file waddleperf-darwin-universal
    
    - name: Upload universal binary
      uses: actions/upload-artifact@v4
      with:
        name: waddleperf-darwin-universal
        path: waddleperf-darwin-universal
        retention-days: 7

  create-packages:
    name: Create Distribution Packages
    runs-on: ubuntu-latest
    needs: [build-matrix, build-macos-universal]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Create archives
      run: |
        mkdir -p packages
        
        # Linux packages
        for arch in amd64 arm64; do
          tar czf packages/waddleperf-linux-${arch}.tar.gz \
            -C artifacts/waddleperf-linux-${arch} .
        done
        
        # Windows packages
        for arch in amd64 arm64; do
          cd artifacts/waddleperf-windows-${arch}
          zip -r ../../packages/waddleperf-windows-${arch}.zip .
          cd ../..
        done
        
        # macOS packages
        tar czf packages/waddleperf-macos-universal.tar.gz \
          -C artifacts/waddleperf-darwin-universal .
        
        # Create checksums
        cd packages
        sha256sum * > SHA256SUMS.txt
    
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: packages/
        retention-days: 30
    
    - name: Upload to release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          packages/*.tar.gz
          packages/*.zip
          packages/SHA256SUMS.txt
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-docker:
    name: Build Go Client Docker Image
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Linux binaries
      uses: actions/download-artifact@v4
      with:
        pattern: waddleperf-linux-*
        path: ./binaries
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/waddleperf-go-client
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Create Dockerfile
      run: |
        cat > go-client/Dockerfile << 'EOF'
        FROM alpine:3.19
        
        RUN apk add --no-cache ca-certificates tzdata && \
            adduser -D -u 1000 waddleperf
        
        COPY waddleperf-linux-* /tmp/
        
        RUN ARCH=$(uname -m) && \
            if [ "$ARCH" = "x86_64" ]; then \
              mv /tmp/waddleperf-linux-amd64/waddleperf-linux-amd64 /usr/local/bin/waddleperf; \
            elif [ "$ARCH" = "aarch64" ]; then \
              mv /tmp/waddleperf-linux-arm64/waddleperf-linux-arm64 /usr/local/bin/waddleperf; \
            fi && \
            chmod +x /usr/local/bin/waddleperf && \
            rm -rf /tmp/waddleperf-linux-*
        
        USER waddleperf
        WORKDIR /home/waddleperf
        
        ENTRYPOINT ["/usr/local/bin/waddleperf"]
        CMD ["run"]
        EOF
        
        cp -r binaries/* go-client/
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./go-client
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max