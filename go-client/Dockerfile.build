# Multi-stage Dockerfile for building WaddlePerf Go client
# This ensures consistent build environment with all dependencies

# Build stage
FROM golang:1.23-alpine AS builder

# Install build dependencies (excluding systray dependencies since we build with nosystray tag)
RUN apk add --no-cache \
    git \
    ca-certificates \
    gcc \
    musl-dev

# Set working directory
WORKDIR /build

# Copy go mod files first for better layer caching
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build arguments for cross-compilation and build info
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETOS=linux
ARG TARGETARCH=amd64
ARG VERSION=dev
ARG BUILD_TIME
ARG GIT_COMMIT

# Build the binary with appropriate tags and flags
RUN echo "Building for ${TARGETOS}/${TARGETARCH} on ${BUILDPLATFORM}" && \
    CGO_ENABLED=0 \
    GOOS=${TARGETOS} \
    GOARCH=${TARGETARCH} \
    go build \
    -tags nosystray \
    -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT}" \
    -o waddleperf-${TARGETOS}-${TARGETARCH} \
    ./cmd/waddleperf

# Test stage (only for native builds to avoid cross-compilation issues)
FROM builder AS tester
RUN if [ "${BUILDPLATFORM}" = "${TARGETPLATFORM}" ]; then \
        echo "Running tests on native platform..." && \
        go test -tags nosystray -timeout 30s -v ./...; \
    else \
        echo "Skipping tests for cross-platform build"; \
    fi

# Runtime stage - minimal image with just the binary
FROM alpine:3.19 AS runtime

# Install runtime dependencies for network testing
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    iputils-ping \
    bind-tools \
    net-tools \
    iperf3 \
    mtr \
    tcpdump && \
    adduser -D -u 1000 waddleperf

# Copy the built binary from builder stage
ARG TARGETOS=linux
ARG TARGETARCH=amd64
COPY --from=builder /build/waddleperf-${TARGETOS}-${TARGETARCH} /usr/local/bin/waddleperf

# Make binary executable
RUN chmod +x /usr/local/bin/waddleperf

# Set up user and working directory
USER waddleperf
WORKDIR /home/waddleperf

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD waddleperf info || exit 1

# Metadata labels
LABEL org.opencontainers.image.title="WaddlePerf Go Client"
LABEL org.opencontainers.image.description="Network performance testing client built with Go"
LABEL org.opencontainers.image.vendor="Penguin Technologies Inc."
LABEL org.opencontainers.image.source="https://github.com/penguintechinc/WaddlePerf"

# Set entrypoint and default command
ENTRYPOINT ["/usr/local/bin/waddleperf"]
CMD ["--help"]

# Build-only stage for extracting binaries
FROM builder AS extractor
ARG TARGETOS=linux
ARG TARGETARCH=amd64
RUN ls -la /build/ && \
    mkdir -p /output && \
    cp /build/waddleperf-${TARGETOS}-${TARGETARCH} /output/ && \
    ls -la /output/